name: 'Setup Inviwo'
description: 'Sets up Inviwo with the recommended set of dependencies'
inputs:
  vcpkg-sha:
    description: 'VCPKG Commit Hash for version control'
    required: true
    default: 'e6dcc079c81161786eb7b052209a2047e79f2c6c'
  build-type:
    description: "Build Type of Inviwo (Release, Debug)"
    required: true
    default: 'Release'
  cmake-flags:
    description: 'Additional CMake flags'
    required: false
    default: ''
  cmake-generator:
    description: 'CMake Generator to be used'
    required: true
  os-triplet:
    description: 'Descriptor of the OS to build for'
    required: true
runs:
  using: "composite"
  steps:
    - shell: bash
      run: echo "testttt"
    - name: 'Restore artifacts, or setup vcpkg (do not install any package)'
      uses: lukka/run-vcpkg@v6
      with:
        # Just install vcpkg for now, do not install any ports in this step yet.
        setupOnly: true
        # Location of the vcpkg submodule in the Git repository.
        vcpkgDirectory: '${{ github.workspace }}/vcpkg'
        # Since the cache must be invalidated when content of the vcpkg.json file changes, let's
        # compute its hash and append this to the computed cache's key.
        appendedCacheKey: ${{ hashFiles( '**/vcpkg.json' ) }}
        vcpkgTriplet: ${{ inputs.cmake-flags }}
        vcpkgGitCommitId: ${{ inputs.vcpkg-sha }}
        # Ensure the vcpkg artifacts are cached, they are generated in the 'CMAKE_BINARY_DIR/vcpkg_installed' directory.
        additionalCachedPaths: build/vcpkg_installed

    - name: 'Setup NuGet Credentials'
      shell: bash
      run: >
        ${{ matrix.mono }} `vcpkg fetch nuget | tail -n 1`
        sources add
        -source "https://nuget.pkg.github.com/inviwo/index.json"
        -storepasswordincleartext
        -name "GitHub"
        -username "inviwo"
        -password "${{ secrets.GITHUB_TOKEN }}"

    - name: Apt Install
      shell: bash
      if: runner.os == 'Linux'
      run: |
        sudo apt install libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev libglew-dev ninja-build doxygen-latex

    - name: Brew Install
      shell: bash
      if: runner.os == 'macOS'
      run: |
        brew install ninja doxygen
        brew install --cask basictex
        eval "$(/usr/libexec/path_helper)"
        echo "$(dirname $(which latex))" >> $GITHUB_PATH

    - name: Install Scoop
      if: runner.os == 'Windows'
      run: |
        Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
        scoop bucket add extras
        scoop install nsis doxygen latex
        echo "~/scoop/shims" >> $GITHUB_PATH
        echo "$(Split-Path -Path (Get-Command dvips).Path -Parent)" >> $GITHUB_PATH

#    - name: VCPKG Install
#      shell: bash
#      run: >
#        vcpkg --triplet ${{ inputs.cmake-flags }} install
#        assimp benchmark cimg eigen3 fmt freetype glfw3 glm gtest zlib
#        hdf5[cpp,zlib] libjpeg-turbo libpng minizip nlohmann-json
#        openexr pybind11 python3 tclap tiff tinydir tinyxml2 utfcpp

    - name: Glew Install
      shell: bash
      if: runner.os != 'Linux'
      run: vcpkg --triplet ${{ inputs.cmake-flags }} install glew

    - name: Install Numpy
      shell: bash
      run: pip3 install numpy

    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: 5.15.0
        dir: ${{ github.workspace }}

    - uses: actions/checkout@v2
      with:
        path: inviwo
        submodules: recursive

    - name: Run CMake to install the dependencies specified in the vcpkg.json manifest and generate project file
      uses: lukka/run-cmake@v3
      with:
         cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
         cmakeListsTxtPath: '${{ github.workspace }}/inviwo/CMakeLists.txt'
         buildDirectory: 'build'
         # This input tells run-cmake to consume the vcpkg.cmake toolchain file set by run-vcpkg.
         useVcpkgToolchainFile: true
         cmakeAppendedArgs: >
           -S inviwo
           -DVCPKG_TARGET_TRIPLET='${{ inputs.cmake-flags }}'
           -DCMAKE_BUILD_TYPE=${{ inputs.build-type }}
           -DIVW_CFG_CMAKE_DEBUG=ON
           -DIVW_CFG_PRECOMPILED_HEADERS=OFF
           -DIVW_CFG_FORCE_ASSERTIONS=ON
           -DIVW_DOXYGEN_PROJECT=ON
           -DIVW_PACKAGE_INSTALLER=ON
           -DIVW_TEST_UNIT_TESTS_RUN_ON_BUILD=OFF
           -DIVW_TEST_BENCHMARKS=OFF
           -DIVW_TEST_INTEGRATION_TESTS=ON
           -DIVW_USE_OPENMP=OFF
           -DIVW_USE_OPENEXR=OFF
           -DIVW_MODULE_CIMG=ON
           -DIVW_MODULE_PYTHON3=OFF
           -DIVW_MODULE_PYTHON3QT=OFF
           -DIVW_MODULE_DATAFRAMEPYTHON=OFF
           -DIVW_PACKAGE_EMBED_PYTHON=OFF
           -DIVW_APP_PYTHON=OFF
           -DIVW_MODULE_MARKETPLACE=ON
           -DIVW_USE_EXTERNAL_ASSIMP=ON
           -DIVW_USE_EXTERNAL_BENCHMARK=ON
           -DIVW_USE_EXTERNAL_EIGEN=ON
           -DIVW_USE_EXTERNAL_FMT=ON
           -DIVW_USE_EXTERNAL_FREETYPE=ON
           -DIVW_USE_EXTERNAL_GLFW=ON
           -DIVW_USE_EXTERNAL_GLM=ON
           -DIVW_USE_EXTERNAL_GTEST=ON
           -DIVW_USE_EXTERNAL_HDF5=ON
           -DIVW_USE_EXTERNAL_IMG=ON
           -DIVW_USE_EXTERNAL_JSON=ON
           -DIVW_USE_EXTERNAL_CIMG=ON
           -DIVW_USE_EXTERNAL_GLEW=ON
           -DIVW_USE_EXTERNAL_TCLAP=ON
           -DIVW_USE_EXTERNAL_UTFCPP=ON
           -DIVW_USE_EXTERNAL_TINYDIR=ON
           -DIVW_USE_EXTERNAL_PYBIND11=ON
           -DIVW_USE_EXTERNAL_OPENEXR=ON
           ${{ inputs.cmake-flags }}
         buildWithCMake: false

    - name: Error Logs Artifact
      uses: actions/upload-artifact@v2
      with:
        name: error-logs
        path: |
          build/CMakeFiles/CMakeOutput.log
          build/CMakeFiles/CMakeError.log
          build/vcpkg-manifest-install.log
      if: ${{ failure() }}

    - name: Setup C++
      uses: Trass3r/setup-cpp@v1
